require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CarrierTypesController do
  fixtures :all

  # This should return the minimal set of attributes required to create a valid
  # CarrierType. As you add validations to CarrierType, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    FactoryBot.attributes_for(:carrier_type)
  end

  context 'When logged in as Administrator' do
    login_fixture_admin
    describe 'GET index' do
      it 'assigns all carrier_types as @carrier_types' do
        carrier_type = CarrierType.create! valid_attributes
        get :index
        expect(assigns(:carrier_types)).to eq(CarrierType.order(:position).page(1))
      end
    end

    describe 'GET show' do
      it 'assigns the requested carrier_type as @carrier_type' do
        carrier_type = CarrierType.create! valid_attributes
        get :show, params: { id: carrier_type.id }
        expect(assigns(:carrier_type)).to eq(carrier_type)
      end
    end

    describe 'GET new' do
      it 'assigns a new carrier_type as @carrier_type' do
        get :new
        expect(assigns(:carrier_type)).to be_a_new(CarrierType)
      end
    end

    describe 'GET edit' do
      it 'assigns the requested carrier_type as @carrier_type' do
        carrier_type = CarrierType.create! valid_attributes
        get :edit, params: { id: carrier_type.id }
        expect(assigns(:carrier_type)).to eq(carrier_type)
      end
    end

    describe 'POST create' do
      describe 'with valid params' do
        it 'creates a new CarrierType' do
          expect do
            post :create, params: { carrier_type: valid_attributes }
          end.to change(CarrierType, :count).by(1)
        end

        it 'assigns a newly created carrier_type as @carrier_type' do
          post :create, params: { carrier_type: valid_attributes }
          expect(assigns(:carrier_type)).to be_a(CarrierType)
          expect(assigns(:carrier_type)).to be_persisted
        end

        it 'redirects to the created carrier_type' do
          post :create, params: { carrier_type: valid_attributes }
          expect(response).to redirect_to(CarrierType.last)
        end
      end

      describe 'with invalid params' do
        it 'assigns a newly created but unsaved carrier_type as @carrier_type' do
          # Trigger the behavior that occurs when invalid params are submitted
          CarrierType.any_instance.stub(:save).and_return(false)
          post :create, params: { carrier_type: { name: 'test' } }
          expect(assigns(:carrier_type)).to be_a_new(CarrierType)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          CarrierType.any_instance.stub(:save).and_return(false)
          post :create, params: { carrier_type: { name: 'test' } }
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT update' do
      describe 'with valid params' do
        it 'updates the requested carrier_type' do
          carrier_type = CarrierType.create! valid_attributes
          # Assuming there are no other carrier_types in the database, this
          # specifies that the CarrierType created on the previous line
          # receives the :update message with whatever params are
          # submitted in the request.
          CarrierType.any_instance.should_receive(:update).with('name' => 'test')
          put :update, params: { id: carrier_type.id, carrier_type: { 'name' => 'test' } }
        end

        it 'assigns the requested carrier_type as @carrier_type' do
          carrier_type = CarrierType.create! valid_attributes
          put :update, params: { id: carrier_type.id, carrier_type: valid_attributes }
          expect(assigns(:carrier_type)).to eq(carrier_type)
        end

        it 'redirects to the carrier_type' do
          carrier_type = CarrierType.create! valid_attributes
          put :update, params: { id: carrier_type.id, carrier_type: valid_attributes }
          expect(response).to redirect_to(carrier_type)
        end

        it 'moves its position when specified' do
          carrier_type = CarrierType.create! valid_attributes
          position = carrier_type.position
          put :update, params: { id: carrier_type.id, move: 'higher' }
          expect(response).to redirect_to carrier_types_url
          assigns(:carrier_type).reload.position.should eq position - 1
        end

        it 'deletes an attachment file' do
          carrier_type = carrier_types(:carrier_type_00001)
          carrier_type.attachment.attach(io: File.open(Rails.root.join('app/assets/images/icons/book.png')), filename: 'book.png')
          carrier_type.save
          expect(carrier_type.attachment.present?).to be_truthy

          put :update, params: { id: carrier_type.id, carrier_type: { delete_attachment: '1' } }
          expect(assigns(:carrier_type).attachment.present?).to be_falsy
        end
      end

      describe 'with invalid params' do
        it 'assigns the carrier_type as @carrier_type' do
          carrier_type = CarrierType.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          CarrierType.any_instance.stub(:save).and_return(false)
          put :update, params: { id: carrier_type.id, carrier_type: { name: 'test' } }
          expect(assigns(:carrier_type)).to eq(carrier_type)
        end

        it "re-renders the 'edit' template" do
          carrier_type = CarrierType.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          CarrierType.any_instance.stub(:save).and_return(false)
          put :update, params: { id: carrier_type.id, carrier_type: { name: 'test' } }
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE destroy' do
      it 'destroys the requested carrier_type' do
        carrier_type = CarrierType.create! valid_attributes
        expect do
          delete :destroy, params: { id: carrier_type.id }
        end.to change(CarrierType, :count).by(-1)
      end

      it 'redirects to the carrier_types list' do
        carrier_type = CarrierType.create! valid_attributes
        delete :destroy, params: { id: carrier_type.id }
        expect(response).to redirect_to(carrier_types_url)
      end
    end
  end

  context 'When not logged in' do
    describe 'GET show' do
      it 'assigns the requested carrier_type as @carrier_type' do
        carrier_type = CarrierType.create! valid_attributes
        get :show, params: { id: carrier_type.id }
        expect(assigns(:carrier_type)).to eq(carrier_type)
        expect(response).to redirect_to(new_user_session_url)
      end

      it 'assigns the requested carrier_type as @carrier_type when the format is download' do
        carrier_type = CarrierType.create! valid_attributes
        expect{
          get :show, params: { id: carrier_type.id, format: :download }
        }.to raise_error(ActionController::UnknownFormat)
        #expect(assigns(:carrier_type)).to raise_error(ActionView::MissingTemplate)
      end
    end
  end
end
